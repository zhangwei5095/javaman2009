/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.ndot.struts.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.ndot.ips.comm.ChannelContral;
import org.ndot.ips.comm.IPSReportChannel;
import org.ndot.ips.log.IPSLogLevel;
import org.springframework.context.support.AbstractRefreshableApplicationContext;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.struts.ContextLoaderPlugIn;

/**
 * MyEclipse Struts Creation date: 07-24-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="success"
 *                        path="/WEB-INF/pages/ServiceControler.jsp"
 */
public class ServiceControlerAction extends IPSAction {
	/*
	 * Generated Methods
	 */

	public ServiceControlerAction() {
		super();
		log.setLog(Logger.getLogger(ServiceControlerAction.class));
	}

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		WebApplicationContext wctx = (WebApplicationContext) this.getServlet()
				.getServletContext().getAttribute(
						ContextLoaderPlugIn.SERVLET_CONTEXT_PREFIX);
		HttpSession session = request.getSession();
		HashMap<String, IPSReportChannel> ipsChannels = (HashMap<String, IPSReportChannel>) wctx
				.getBeansOfType(IPSReportChannel.class);
		List<IPSReportChannel> channels = new ArrayList<IPSReportChannel>();

		String reLoad = request.getParameter("reLoad");
		if (null != reLoad && !"".equals(reLoad)) {
			// 获得综合前置配置的所有渠道服务,并停止
			log.writeLog(IPSLogLevel.INFO, "IPS-Action  开始重新加载所有配置和服务信息......");
			log.writeLog(IPSLogLevel.INFO, "IPS-Action  进行停止已经配置的服务监听......");
			show(ipsChannels, channels, true);
			log.writeLog(IPSLogLevel.INFO, "IPS-Action  所有配置的服务监听停止完毕！");
			((AbstractRefreshableApplicationContext) wctx).refresh();
			log.writeLog(IPSLogLevel.INFO, "IPS-Action 所有配置和服务信息重新加载完毕！");
			// 重新获取渠道服务配置
			ipsChannels = (HashMap<String, IPSReportChannel>) wctx
					.getBeansOfType(IPSReportChannel.class);
		}
		show(ipsChannels, channels, false);
		session.setAttribute("ipsChannels", channels);
		return mapping.findForward("success");
	}

	@SuppressWarnings("unchecked")
	private void show(HashMap<String, IPSReportChannel> ipsChannels,
			List<IPSReportChannel> channels, boolean reload) {
		for (Iterator iterator = ipsChannels.keySet().iterator(); iterator
				.hasNext();) {
			String name = (String) iterator.next();
			IPSReportChannel channel = ipsChannels.get(name);
			if (reload) {
				log.writeLog(IPSLogLevel.INFO, "IPS-Action 停止 【"
						+ channel.getName() + "】" + " 服务监听......");
				channel.setStop(true);
				new Thread(new ChannelContral(channel)).start();
			} else {
				channels.add(channel);
			}
		}

	}
}